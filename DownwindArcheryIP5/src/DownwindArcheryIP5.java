/*
 * Filename:  DownwindArcheryIP5.java
 * Created 2/11/13 by Tim Paulson
 *
 * Purpose: To allow a user to log in with username and password
 * Next to submit and order for hunting bows and receive a confirmation
 * 
 * 
 * 
 */
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author tpaulson
 */
public class DownwindArcheryIP5 extends javax.swing.JFrame {
    
    

    public DownwindArcheryIP5() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomLable = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        customerLabel = new javax.swing.JLabel();
        streetLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        zipLabel = new javax.swing.JLabel();
        customerNameTF = new javax.swing.JTextField();
        streetAddressTF = new javax.swing.JTextField();
        cityTF = new javax.swing.JTextField();
        stateTF = new javax.swing.JTextField();
        zipCodeTF = new javax.swing.JTextField();
        bowBrandLabel = new javax.swing.JLabel();
        camoPatternLabel = new javax.swing.JLabel();
        bowQtyLabel = new javax.swing.JLabel();
        bowBrandTF = new javax.swing.JTextField();
        camoPatternTF = new javax.swing.JTextField();
        bowQtyTF = new javax.swing.JTextField();
        submitOrderBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        javax.swing.JButton exitBtn = new javax.swing.JButton();
        orderInstLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneNumberTF = new javax.swing.JTextField();
        checkOrderBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Downwind Archery");
        setResizable(false);

        welcomLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomLable.setText("**** Welcome to Downwind Archery's Online Ordering System ****");

        jLabel1.setText("Please enter your shipping information.");

        customerLabel.setText("Customer Name:");

        streetLabel.setText("Street address:");

        cityLabel.setText("City:");

        stateLabel.setText("State:");

        zipLabel.setText("Zip Code:");

        customerNameTF.setToolTipText("Enter your name.");

        streetAddressTF.setToolTipText("Enter your street address.");

        cityTF.setToolTipText("Enter your city.");

        stateTF.setToolTipText("Enter your state. (Example: NY, CA, FL)");

        zipCodeTF.setToolTipText("Enter a 5 digit zip code.");

        bowBrandLabel.setText("Bow Brand (1 - Matthews, 2 - Hoyt, 3 - PSE):");

        camoPatternLabel.setText("Camo Pattern (1 - Realtree, 2 - MossyOak, 3 - Woodland):");

        bowQtyLabel.setText("Bow Quantity <1-99>:");

        bowBrandTF.setToolTipText("Enter a number <1-3>");

        camoPatternTF.setToolTipText("Enter a number <1-3>");

        bowQtyTF.setToolTipText("Enter a quantity <1-99>");

        submitOrderBtn.setText("Submit Order");
        submitOrderBtn.setToolTipText("Click to Submit your order.");
        submitOrderBtn.setEnabled(false);
        submitOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitOrderBtnActionPerformed(evt);
            }
        });

        clearFormBtn.setText("Clear Form");
        clearFormBtn.setToolTipText("Click to clear the form.");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.setToolTipText("Click to exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        orderInstLabel.setText("*** Please Enter a bow brand, camo pattern, and quantity. ***");

        phoneNumberLabel.setText("Phone Number:");

        phoneNumberTF.setToolTipText("Enter a 10 digit phone number: XXX-XXX-XXXX");

        checkOrderBtn.setText("Check Order ");
        checkOrderBtn.setToolTipText("Click to Check Order");
        checkOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOrderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(camoPatternLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bowBrandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orderInstLabel)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(checkOrderBtn)
                                        .addGap(71, 71, 71)
                                        .addComponent(clearFormBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(bowQtyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bowQtyTF, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                            .addComponent(camoPatternTF)
                            .addComponent(bowBrandTF))
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(submitOrderBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBtn)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(welcomLable, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(streetLabel)
                                    .addComponent(customerLabel)
                                    .addComponent(cityLabel)
                                    .addComponent(stateLabel)
                                    .addComponent(phoneNumberLabel)
                                    .addComponent(zipLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(customerNameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(streetAddressTF)
                                    .addComponent(cityTF)
                                    .addComponent(stateTF)
                                    .addComponent(zipCodeTF)
                                    .addComponent(phoneNumberTF))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomLable, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerLabel)
                    .addComponent(customerNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streetAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streetLabel))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zipLabel))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phoneNumberLabel)
                    .addComponent(phoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(orderInstLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bowBrandLabel)
                    .addComponent(bowBrandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(camoPatternTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(camoPatternLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bowQtyTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bowQtyLabel))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearFormBtn)
                    .addComponent(checkOrderBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitBtn))
                .addGap(40, 40, 40))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-452)/2, (screenSize.height-584)/2, 452, 584);
    }// </editor-fold>//GEN-END:initComponents

    private void submitOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitOrderBtnActionPerformed

        String customerName, streetAddress, errorMsg, displayErrorMsg, city, state, zipCode;
        String bowBrand, camoPattern, bowQty, phoneNumber, orderReviewMsg, bowBrandText, camoPatternText;
        int bowBrandNum, camoPatternNum, bowQtyNum;

        try {
            customerName = customerNameTF.getText().trim().toUpperCase();
            streetAddress = streetAddressTF.getText().trim().toUpperCase();
            city = cityTF.getText().trim().toUpperCase();
            state = stateTF.getText().trim().toUpperCase();
            zipCode = zipCodeTF.getText().trim();
            phoneNumber = phoneNumberTF.getText().trim();
            bowBrand = bowBrandTF.getText().trim();
            bowBrandNum = Integer.parseInt(bowBrand);
            camoPattern = camoPatternTF.getText().trim();
            camoPatternNum = Integer.parseInt(camoPattern);
            bowQty = bowQtyTF.getText().trim();
            bowQtyNum = Integer.parseInt(bowQty);
            bowBrandText = "";
            camoPatternText = "";
            
            


            //Check to see whick bow brand was selected and set the text to display
            if (bowBrandNum == 1) {
                bowBrandText = "Matthews";
            }
            if (bowBrandNum == 2) {
                bowBrandText = "Hoyt";
            }
            if (bowBrandNum == 3) {
                bowBrandText = "PSE";
            }

            //Check to see which camo pattern was selected and set the text to display
            if (camoPatternNum == 1) {
                camoPatternText = "Realtree";
            }
            if (camoPatternNum == 2) {
                camoPatternText = "MossyOak";
            }
            if (camoPatternNum == 3) {
                camoPatternText = "Woodland";
            }


            try {

                try {
                    try (PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("BowOrder.txt", false)))) {
                        pw.println("Customer Name:  " + customerName);
                        pw.println("Street Address: " + streetAddress);
                        pw.println("City: " + city);
                        pw.println("State: " + state);
                        pw.println("Zip Code: " + zipCode);
                        pw.println("Phone Number: " + phoneNumber);
                        pw.println("Bow Brand: " + bowBrandText);
                        pw.println("Camo Pattern: " + camoPatternText);
                        pw.println("Bow quantity: " + bowQty);
                       

                    }//end try

                }//end try 
                catch (IOException ex) {
                    Logger.getLogger(DownwindArcheryIP5.class.getName()).log(Level.SEVERE, null, ex);
                }//end catch

                BufferedReader br = new BufferedReader(new FileReader("BowOrder.txt"));
                customerName = br.readLine();
                streetAddress = br.readLine();
                city = br.readLine();
                state = br.readLine();
                zipCode = br.readLine();
                phoneNumber = br.readLine();
                bowBrandText = br.readLine();
                camoPatternText = br.readLine();
                bowQty = br.readLine();
                



                JOptionPane.showMessageDialog(null, "              *** ORDER CONFIRMATION ***\n\n" + "The Order below has been submitted:\n\n"
                        + customerName + "\n" + streetAddress + "\n" + city + "\n" + state + "\n" + zipCode + "\n" + phoneNumber
                        + "\n\n*** Your Order ***\n\n" + bowBrandText + "\n" + camoPatternText + "\n" + bowQty                       
                        + "\n\n             *** ALL ORDERS ARE FINAL ***\n Thank You for shopping with Downwind Archery!!");


            } //end try
            catch (IOException ex) {
                Logger.getLogger(DownwindArcheryIP5.class.getName()).log(Level.SEVERE, null, ex);
            }//end catch

        }//end try
        catch (NumberFormatException e) {
            String error = "You MUST fill out all text fields before you can submit your order.";
            JOptionPane.showMessageDialog(null, error);
        }//end catch
        
        customerNameTF.setText("");
        streetAddressTF.setText("");
        cityTF.setText("");
        stateTF.setText("");
        zipCodeTF.setText("");
        bowBrandTF.setText("");
        camoPatternTF.setText("");
        bowQtyTF.setText("");
        phoneNumberTF.setText("");
        submitOrderBtn.setEnabled(false);

        String placeOrder = "To continue shopping Click 'OK'\n To quit Click 'OK' and EXIT";
        JOptionPane.showMessageDialog(null, placeOrder);
        
        

        //end submitOrderBtn
    }//GEN-LAST:event_submitOrderBtnActionPerformed
    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        customerNameTF.setText("");
        streetAddressTF.setText("");
        cityTF.setText("");
        stateTF.setText("");
        zipCodeTF.setText("");
        bowBrandTF.setText("");
        camoPatternTF.setText("");
        bowQtyTF.setText("");
        phoneNumberTF.setText("");
        submitOrderBtn.setEnabled(false);

    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void checkOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOrderBtnActionPerformed

        String customerName, streetAddress, errorMsg, displayErrorMsg, city, state, zipCode;
        String bowBrand, camoPattern, bowQty, phoneNumber, orderReviewMsg, phoneNumberPattern, patternPhone, patternZipCode;
        String zipCodePattern, bowBrandText1 = null, camoPatternText1 = null;
        int bowBrandNum, camoPatternNum, bowQtyNum;

        customerName = customerNameTF.getText().trim().toUpperCase();
        streetAddress = streetAddressTF.getText().trim().toUpperCase();
        city = cityTF.getText().trim().toUpperCase();
        state = stateTF.getText().trim().toUpperCase();
        zipCode = zipCodeTF.getText().trim();
        phoneNumber = phoneNumberTF.getText().trim();
        bowBrand = bowBrandTF.getText().trim();
        camoPattern = camoPatternTF.getText().trim();
        bowQty = bowQtyTF.getText().trim();

        if ("".equals(customerName) || "".equals(streetAddress) || "".equals(city)
                || "".equals(state) || "".equals(zipCode) || "".equals(phoneNumber)
                || "".equals(bowBrand) || "".equals(camoPattern) || "".equals(bowQty)) {

            submitOrderBtn.setEnabled(false);

        }//end if
        else {
            submitOrderBtn.setEnabled(true);
        }//end else


        try {
            bowBrandNum = Integer.parseInt(bowBrand);
            camoPatternNum = Integer.parseInt(camoPattern);
            bowQtyNum = Integer.parseInt(bowQty);
            bowBrandText1 = "";
            camoPatternText1 = "";


            //establishes the 2 letter state name pattern
            String patternState = "..";
            String statePattern = state;
            Pattern pState = Pattern.compile(patternState);
            Matcher mState = pState.matcher(state);

            //establishes the zip code 5 digit pattern
            patternZipCode = "\\d\\d\\d\\d\\d";
            zipCodePattern = zipCode;
            Pattern pZip = Pattern.compile(patternZipCode);
            Matcher mZip = pZip.matcher(zipCode);

            //establishes the phone number 10 digit pattern
            patternPhone = "\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d";
            phoneNumberPattern = phoneNumber;
            Pattern p = Pattern.compile(patternPhone);
            Matcher m = p.matcher(phoneNumber);


            if (customerName.length() == 0) {
                errorMsg = "<ERROR>You must enter a Customer Name.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (streetAddress.length() == 0) {
                errorMsg = "<ERROR> You must enter an Address.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (city.length() == 0) {
                errorMsg = "<ERROR> You must enter a City.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (state.length() == 0) {
                errorMsg = "<ERROR> You must enter a State.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            //checks for correct 2 letter state pattern      
            if (mState.matches() == false) {
                errorMsg = "<ERROR> You must format the State correctly.\n\nExample:  NY, CA, FL ect.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }


            if (zipCode.length() == 0) {
                errorMsg = "<ERROR> You must enter a Zip Code.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }

            //checks for correct zip code  5 digit pattern
            if (mZip.matches() == false) {
                errorMsg = "<ERROR> You must format the zip code correctly with 5 digits.\n\nExample:  XXXXX";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }

            if (phoneNumber.length() == 0) {
                errorMsg = "<ERROR> You must enter a Phone Number.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
                
            }

            //checks for correct phone Number  10 digit pattern      
            if (m.matches() == false) {
                errorMsg = "<ERROR> You must format the phone number correctly.\n\nExample:  XXX-XXX-XXXX";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }

            if (bowBrandNum > 3) {
                errorMsg = "<ERROR> You must enter a number <1-3>\n for your bow selection.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (bowBrandNum == 0) {
                errorMsg = "<ERROR> You must enter a number <1-3>\nfor your camo pattern selection.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (camoPatternNum > 3) {
                errorMsg = "<ERROR> You must enter a number <1-3>\nfor your camo pattern selection.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (camoPatternNum == 0) {
                errorMsg = "<ERROR> You must enter a number <1-3>\nfor your camo pattern selection.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (bowQtyNum > 99) {
                errorMsg = "<ERROR> You must enter a number <1-99>\n You may NOT order more than 99 bows.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }
            if (bowQtyNum == 0) {
                errorMsg = "<ERROR> You must enter a number <1-99>\nfor your camo pattern selection.";
                JOptionPane.showMessageDialog(null, errorMsg);
                submitOrderBtn.setEnabled(false);
            }

            //Check to see whick bow brand was selected and set the text to display
            if (bowBrandNum == 1) {
                bowBrandText1 = "Matthews";
            }
            if (bowBrandNum == 2) {
                bowBrandText1 = "Hoyt";
            }
            if (bowBrandNum == 3) {
                bowBrandText1 = "PSE";
            }

            //Check to see which camo pattern was selected and set the text to display
            if (camoPatternNum == 1) {
                camoPatternText1 = "Realtree";
            }
            if (camoPatternNum == 2) {
                camoPatternText1 = "MossyOak";
            }
            if (camoPatternNum == 3) {
                camoPatternText1 = "Woodland";
            } else {
                orderReviewMsg = "*** PLEASE REVIEW YOUR ORDER INFORMATION CAREFULLY ***\n*** ALL ORDERS ARE FINAL ONCE SUBMITTED ***\n\nCustomer Name: "
                        + customerName + "\nStreet Address:  " + streetAddress + "\nCity:  " + city + "\nState:  " + state
                        + "\nZip Code:  " + zipCode + "\nPhone Number:  " + phoneNumber + "\n\nYou have selected the following to order:\n\nBow Brand:  "
                        + bowBrandText1 + "\nCamo Pattern:  " + camoPatternText1 + "\nBow Qty:  " + bowQty
                        + "\n\n*** If you are satisfied with your order click 'OK' then 'SUBMIT ORDER' ***";
                JOptionPane.showMessageDialog(null, orderReviewMsg);
            }//end else

        }//end try
        catch (NumberFormatException e) {
            String error = "You MUST fill out all text fields PROPERLY";
            JOptionPane.showMessageDialog(null, error);
            submitOrderBtn.setEnabled(false);
        }//end catch



        //end checkOrderBtnActionPerformed   
    }//GEN-LAST:event_checkOrderBtnActionPerformed

    
    public static void intro() {

        //declare and initialize variables
        String openingMsg, openingMsg1, openingMsg2, openingMsg3, openingMsg4, openingMsg5,
                openingMsg6, openingMsg7;

        //display opening message
        openingMsg1 = "*** Welcome to Downwind Archery Online Ordering System *** \n\n";
        openingMsg2 = "You are now able to order top of the line bows through our online ";
        openingMsg3 = "ordering system. \n\n";
        openingMsg4 = "You may choose from three brands of bows:  ";
        openingMsg5 = "Matthews, Hoyt, or PSE \n\n";
        openingMsg6 = "The camo patterns you can choose from are:  ";
        openingMsg7 = "Realtree, Mossyoak, and Woodland. \n\n";
        openingMsg = openingMsg1 + openingMsg2 + openingMsg3 + openingMsg4 + openingMsg5 + openingMsg6 + openingMsg7;
        JOptionPane.showMessageDialog(null, openingMsg);

    }//end intro()Method **************

    // askIfReturnCustomer() will ask if the user is a returning customer and also give an error message if nothing is entered.
    public static void askIfReturnCustomer() {

        //declare and initialize variables
        String nameInputMsg, returnInputMsg, customerReturn, userid, password, loginMsg, pwMsg,
                invalidEntry = "<INVALID ENTRY>";
        boolean returnYes, returnNo, validCustomer;
        int returnFlag;

        //determine if the user is a returning or new customer
        returnInputMsg = "Are you a returning customer (Enter y or n)?";
        customerReturn = JOptionPane.showInputDialog(returnInputMsg);

        returnYes = customerReturn.equalsIgnoreCase("y");
        returnNo = customerReturn.equalsIgnoreCase("n");

        //initalize return flag
        if (returnYes) {
            returnFlag = 1;
        } else if (returnNo) {
            returnFlag = 2;
        } else {
            returnFlag = 0;
        }

        
        switch (returnFlag) {
            //************************** start CASE 1 ****************************************
            case 1:
                loginMsg = "Please enter your Current username:  ";
                userid = JOptionPane.showInputDialog(null, loginMsg);

                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a username.";
                    validCustomer = userid.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            loginMsg = "Please enter your Current username:  ";
                            userid = JOptionPane.showInputDialog(null, loginMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

                pwMsg = "Please enter your Current password:  ";
                password = JOptionPane.showInputDialog(null, pwMsg);

                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a password.";
                    validCustomer = password.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            pwMsg = "Please enter your Current password:  ";
                            password = JOptionPane.showInputDialog(null, pwMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

                break;
            //*********************** start CASE 2 ********************************************
            case 2:
                loginMsg = "Please enter your New username:  ";
                userid = JOptionPane.showInputDialog(null, loginMsg);
                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a username.";
                    validCustomer = userid.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            loginMsg = "Please enter your New username:  ";
                            userid = JOptionPane.showInputDialog(null, loginMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

                pwMsg = "Please enter your New password:  ";
                password = JOptionPane.showInputDialog(null, pwMsg);

                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a password.";
                    validCustomer = password.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            pwMsg = "Please enter your New password:  ";
                            password = JOptionPane.showInputDialog(null, pwMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

                break;
            //************************* start DEFAULT CASE ************************************
            default:
                JOptionPane.showMessageDialog(null, invalidEntry);
                loginMsg = "Please enter your New username:  ";
                userid = JOptionPane.showInputDialog(null, loginMsg);
                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a username.";
                    validCustomer = userid.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            loginMsg = "Please enter your New username:  ";
                            userid = JOptionPane.showInputDialog(null, loginMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

                pwMsg = "Please enter your New password:  ";
                password = JOptionPane.showInputDialog(null, pwMsg);

                //repeat until a name is entered or exit after 3 tries
                for (int i = 1; i <= 3; i++) {
                    invalidEntry = "<INVALID ENTRY> You must enter a password.";
                    validCustomer = password.isEmpty();
                    if (validCustomer) {
                        JOptionPane.showMessageDialog(null, invalidEntry);
                        if (i == 3) {
                            System.exit(0);
                        } else {
                            pwMsg = "Please enter your New password:  ";
                            password = JOptionPane.showInputDialog(null, pwMsg);
                        }
                    } else {
                        break;
                    }
                }//end for loop

        }// end switch
        
        

    }//end ifReturncustomer() Method*************

    public static void main(String args[]) {

        intro();
        askIfReturnCustomer();



        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownwindArcheryIP5.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownwindArcheryIP5.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownwindArcheryIP5.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownwindArcheryIP5.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new DownwindArcheryIP5().setVisible(true);


            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bowBrandLabel;
    private javax.swing.JTextField bowBrandTF;
    private javax.swing.JLabel bowQtyLabel;
    private javax.swing.JTextField bowQtyTF;
    private javax.swing.JLabel camoPatternLabel;
    private javax.swing.JTextField camoPatternTF;
    private javax.swing.JButton checkOrderBtn;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTF;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JTextField customerNameTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel orderInstLabel;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTF;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateTF;
    private javax.swing.JTextField streetAddressTF;
    private javax.swing.JLabel streetLabel;
    private javax.swing.JButton submitOrderBtn;
    private javax.swing.JLabel welcomLable;
    private javax.swing.JTextField zipCodeTF;
    private javax.swing.JLabel zipLabel;
    // End of variables declaration//GEN-END:variables
}
